/* autogenerated by Processing revision 1286 on 2025-10-21 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import processing.sound.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class calculator extends PApplet {

// (c) Andrew Yenchek 2025

SoundFile buttonSound;
static int SCALE = 30;
static int WIDTH_BASE = 25;
static int HEIGHT_BASE = 22;
Display display;
public enum operators {
  PLUS, MINUS, DIVIDE, MULTI, ETOTHEX, SIN, COS, SQRT, NONE
};
operators operator;
Button[] buttons = new Button[22];
IntList buttonsList2 = new IntList(9);
float result;
 public void setup() {
  /* size commented out by preprocessor */;
  surface.setResizable(true);
  surface.setSize(WIDTH_BASE*SCALE, HEIGHT_BASE*SCALE);
  buttonSound = new SoundFile(this, "button.mp3");
  textAlign(CENTER);
  for(int i = 48; i < 58; i++){
    buttonsList2.append(i);
  }
  buttonsList2.shuffle();
  display = new Display();
  operator = operators.NONE;
  buttons[0] = new Button(5, 18, '.');
  buttons[1] = new Button(9, 18, (char)buttonsList2.get(0));
  buttons[2] = new Button(13, 18, '=');
  buttons[3] = new Button(17, 18, 'x');
  buttons[4] = new Button(21, 18, '±');
  buttons[5] = new Button(1, 18, '√');
  buttons[6] = new Button(1, 14, 'c');
  buttons[7] = new Button(5, 14, (char)buttonsList2.get(1));
  buttons[8] = new Button(9, 14, (char)buttonsList2.get(2));
  buttons[9] = new Button(13, 14, (char)buttonsList2.get(3));
  buttons[10] = new Button(17, 14, '-');
  buttons[11] = new Button(1, 10, 'e');
  buttons[12] = new Button(5, 10, (char)buttonsList2.get(4));
  buttons[13] = new Button(9, 10, (char)buttonsList2.get(5));
  buttons[14] = new Button(13, 10, (char)buttonsList2.get(6));
  buttons[15] = new Button(17, 10, '+');
  buttons[16] = new Button(1, 6, 'S');
  buttons[17] = new Button(5, 6, (char)buttonsList2.get(7));
  buttons[18] = new Button(9, 6, (char)buttonsList2.get(8));
  buttons[19] = new Button(13, 6, (char)buttonsList2.get(9));
  buttons[20] = new Button(17, 6, '/');
  buttons[21] = new Button(20, 1, 'C');
}
 public void tryToAddCharacter(char clicked) {
  if (!display.isDisplayFull())
    display.addText(clicked);
}

 public void draw() {
  background(242, 234, 7);
  // update hovering status
  for (int i = 0; i < buttons.length; i++) {
    buttons[i].display();
    char clicked = buttons[i].mousePressed();
    if (clicked != 0){
        buttonSound.play(); 
    }
    switch(clicked) {
    case 0:
      break;
    case 'C':
      display.clearAll();
      break;
    case ' ':
      break;
      // TODO: add op. logic
    case '-':
      // this line of code adds the number into the display. we only give it number 1 if there is no previous operator.
      display.addOperand(display.getCurrentNumber(), (operator!=operators.NONE));
      operator = operators.MINUS;
      display.clearDisplay();
      break;
    case '/':
      display.addOperand(display.getCurrentNumber(), (operator!=operators.NONE));
      operator = operators.DIVIDE;
      display.clearDisplay();
      break;
    case '+':
      display.addOperand(display.getCurrentNumber(), (operator!=operators.NONE));
      operator = operators.PLUS;
      display.clearDisplay();
      break;
    case 'x':
      display.addOperand(display.getCurrentNumber(), (operator!=operators.NONE));
      operator = operators.MULTI;
      display.clearDisplay();
      break;
    case '=':
      display.addOperand(display.getCurrentNumber(), true);
      display.updateResult(operator);
      operator = operators.NONE;
      break;
    case 'e':
      display.setupForOneOperand();
      operator = operators.ETOTHEX;
      display.updateResult(operator);
      operator = operators.NONE;
      break;
    case 'S':
      display.setupForOneOperand();
      display.updateResult(operators.SIN);
      operator = operators.NONE;
      break;
    case 'c':
      display.setupForOneOperand();
      operator = operators.COS;
      display.updateResult(operator);
      operator = operators.NONE;
      break;
    case '√':
      display.setupForOneOperand();
      operator = operators.SQRT;
      display.updateResult(operator);
      operator = operators.NONE;
      break;
    case '±':
      display.plusMinus();
      break;
    case '.':
      if(!(display.getText().contains(".")))
        tryToAddCharacter(clicked);
      break;
    default:
      tryToAddCharacter(clicked);
    }
  }
  display.display();
}
static int BUTTONSIZE = 3;

class Button {
  int x, y;
  int bgColor = color(123, 63, 0);
  int bgColorActive = color(128);
  int textColor = color(255, 0, 230);
  boolean isHovering;
  boolean click;
  char use;
  PImage button;
  Button(int startX, int startY, char newUse) {
    isHovering = false;
    x = startX*SCALE;
    y = startY*SCALE;
    use = newUse;
    click = false;
    if(newUse == 'C')
      button = loadImage("button2.jpg");
    else if(newUse == '8')
      button = loadImage("button10.jpg");
    else if(newUse == '3')
       button = loadImage("button11.jpg");
    else if(newUse == '1')
      button = loadImage("button12.jpg");
    else if(newUse == '7')
      button = loadImage("button14.jpg");
    else if(newUse == '6')
      button = loadImage("button15.jpg");
    else if(newUse == '5')
      button = loadImage("button16.jpg");
    else if(newUse == '='){
      button = loadImage("button3.jpg");
    }
    else if(newUse == '9')
      button = loadImage("button17.jpg");
    else if(newUse == '.')
      button = loadImage("button18.png");
    else if(newUse == '4')
      button = loadImage("button19.jpg");
    else if(newUse == '2')
      button = loadImage("button20.jpg");
    else if(newUse == '0')
      button = loadImage("button21.jpg");
    else if(newUse == 'e')
      button = loadImage("button22.png");
    else if(newUse == 'x')
      button = loadImage("button23.jpg");
    else if(newUse == '/')
       button = loadImage("button.jpg");
    else if (newUse == 'S')
       button = loadImage("button5.jpg");
    else if(newUse == '±')
      button = loadImage("button6.jpg");
    else if (newUse == '-')
      button = loadImage("button7.jpg");
    else if (newUse == 'c')
      button = loadImage("button8.jpg"); 
    else if (newUse == '√')
      button = loadImage("button9.jpg");
      
  else
    button = loadImage("button4.jpg");
  }
   public char mousePressed() {
    if (mouseX >= x && mouseY >= y && mouseX <= x+(BUTTONSIZE*SCALE)
    && mouseY <= y+(BUTTONSIZE*SCALE)) {
      isHovering = true;
    } else {
      isHovering = false;
    }
    if (isHovering && mousePressed && mouseButton == LEFT && !click) {
      click = true;
      return use;
    }
    if (click == true && !mousePressed) {
      click = false;
    }
    return 0;
  }
   public void display() {
    if (isHovering)
      tint(255, 128);
    else
      tint(255, 255);
    fill(bgColor);

    textSize(SCALE*2.5f);
    rect(x, y, (BUTTONSIZE*SCALE), (BUTTONSIZE*SCALE));
    
    image(button, x, y, (BUTTONSIZE*SCALE), (BUTTONSIZE*SCALE));
    tint(255, 255);
    fill(textColor);
    text(use, x+((0.5f)*BUTTONSIZE*SCALE), y+SCALE+((BUTTONSIZE*SCALE)/2));
  }
   public void performCalculations() {
  }
};
static int DISPLAY_WIDTH = 18;
static int DISPLAY_HEIGHT = 4;
// if this is too high the display will be messed up.
static int DISPLAY_MAX = 10;


class Display {
  String text;
  double number1;
  double number2;
  double result;
  PImage display;
  Display() {
    text = "";
    number1 = 0.0f;
    number2 = 0.0f;
    result = 0.0f;
    display=loadImage("display");
  }
   public void display() {
    fill(255, 0, 0);
    rect(SCALE, SCALE, SCALE*DISPLAY_WIDTH, SCALE*DISPLAY_HEIGHT);
    fill(242, 234, 7);
    textSize(SCALE*3);
    tint(255, 255);
    image(display, SCALE, SCALE, SCALE*DISPLAY_WIDTH, SCALE*DISPLAY_HEIGHT);
    tint(255, 255);
    
    textAlign(TOP);
    text(text, (SCALE*2), SCALE+(DISPLAY_HEIGHT/2)*SCALE);
    textAlign(CENTER);
   
  }
   public void plusMinus(){
    double temp = (-1*getCurrentNumber());
    text = "";
    text += temp;
  }
   public boolean isDisplayFull() {
    return !(text.length() <= DISPLAY_MAX);
  }
   public String getText() {
    return text;
  }
   public void clearAll() {
    clearDisplay();
    number1 = 0.0f;
    number2 = 0.0f;
    result = 0.0f;
  }
   public void addText(char button) {
    text += button;
  }
   public void clearDisplay() {
    text = "";
 //   number1= 0;
 //   number2= 0;
  }
   public void displayResult() {
    if (result%1 == 0)
      text += (int)result;
    else {
      String temptext = "";
      temptext += result;
      if (temptext.length() < DISPLAY_MAX) {

        text+= result;
      } else {
        for (int i = 0; i < DISPLAY_MAX; i++) {
          text+= temptext.charAt(i);
        }
      }
    }
  }
  // this is fried
  // TODO: Fix this
   public double getCurrentNumber() {
    if(text.length() != 0)
      return Double.parseDouble(text);
    else
      return 0.0f;
  }
  // if bool is true, add number to number 2. if bool = false, add number to number 1
   public void addOperand(double number, boolean number1or2) {
    if (number1or2 == true) {
      number2 += number;
    } else
      number1 += number;
  }
   public void setupForOneOperand(){
    number2 = 0.f;
    result = 0.f;
    number1 = getCurrentNumber();
  }
   public void updateResult(operators op) {
    clearDisplay();
    if (op == operators.PLUS) {
      this.result = number1 + number2;
    } else if (op == operators.MINUS) {
      this.result = number1 - number2;
    }
    else if(op == operators.SIN){
      this.result = sin(radians((float)number1));
    }
    else if(op == operators.COS){
      this.result = cos(radians((float)number1));
    }
    else if(op == operators.SQRT)
      this.result = sqrt((float)number1);
    if (op == operators.ETOTHEX){
      this.result = exp((float)number1);
    }
    if (op == operators.DIVIDE) {
      if (number2 == 0) {
        clearAll();
        return;
      }
      this.result = number1 / number2;
    }
    if (op == operators.MULTI) {
      this.result = number1 * number2;
    }
    clearDisplay();
    displayResult();
    print("result is ");
    println(this.result);
    print("operator is ");
    println(op);
    print("number 1 is ");
    print(number1);
    print("number2 is ");
    println(number2);
  }
};


  public void settings() { size(10, 10); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "calculator" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
